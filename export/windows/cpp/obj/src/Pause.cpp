// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Pause
#include <Pause.h>
#endif
#ifndef INCLUDED_Phone
#include <Phone.h>
#endif
#ifndef INCLUDED_Time
#include <Time.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_059b4d95500c6d26_16_new,"Pause","new",0xda1c0ac8,"Pause.new","Pause.hx",16,0xe32165a8)
HX_LOCAL_STACK_FRAME(_hx_pos_059b4d95500c6d26_23_create,"Pause","create",0x8a659d94,"Pause.create","Pause.hx",23,0xe32165a8)
HX_LOCAL_STACK_FRAME(_hx_pos_059b4d95500c6d26_45_update,"Pause","update",0x955bbca1,"Pause.update","Pause.hx",45,0xe32165a8)
HX_LOCAL_STACK_FRAME(_hx_pos_059b4d95500c6d26_55_fadeThings,"Pause","fadeThings",0x21c439f9,"Pause.fadeThings","Pause.hx",55,0xe32165a8)
HX_LOCAL_STACK_FRAME(_hx_pos_059b4d95500c6d26_62_closeIT,"Pause","closeIT",0xf63c440b,"Pause.closeIT","Pause.hx",62,0xe32165a8)

void Pause_obj::__construct( ::Dynamic BGColor){
            	HX_STACKFRAME(&_hx_pos_059b4d95500c6d26_16_new)
HXLINE(  16)		super::__construct(BGColor);
            	}

Dynamic Pause_obj::__CreateEmpty() { return new Pause_obj; }

void *Pause_obj::_hx_vtable = 0;

Dynamic Pause_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Pause_obj > _hx_result = new Pause_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Pause_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3634c52c) {
		if (inClassId<=(int)0x25a685e0) {
			if (inClassId<=(int)0x2335d9a7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
			} else {
				return inClassId==(int)0x25a685e0;
			}
		} else {
			return inClassId==(int)0x3634c52c;
		}
	} else {
		return inClassId==(int)0x508546d6 || inClassId==(int)0x7f681f43;
	}
}

void Pause_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_059b4d95500c6d26_23_create)
HXLINE(  24)		this->_bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)0,null());
HXLINE(  25)		this->_bg->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,(int)-16777216,null(),null());
HXLINE(  26)		this->_bg->set_alpha((int)0);
HXLINE(  27)		this->add(this->_bg);
HXLINE(  29)		::flixel::tweens::FlxTween_obj::tween(this->_bg, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.3), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())));
HXLINE(  31)		this->_phone =  ::Phone_obj::__alloc( HX_CTX );
HXLINE(  32)		this->add(this->_phone);
HXLINE(  33)		this->_phone->set_x((int)20);
HXLINE(  34)		this->_phone->set_y(::flixel::FlxG_obj::height);
HXLINE(  36)		::flixel::tweens::FlxTween_obj::tween(this->_phone, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(int)40)),((Float)0.6), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticOut_dyn())));
HXLINE(  38)		this->_timeStuff =  ::Time_obj::__alloc( HX_CTX );
HXLINE(  39)		this->add(this->_timeStuff);
HXLINE(  41)		this->super::create();
            	}


void Pause_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_059b4d95500c6d26_45_update)
HXLINE(  46)		if ((::flixel::FlxG_obj::mouse->_rightButton->current == (int)2)) {
HXLINE(  47)			this->fadeThings();
            		}
HXLINE(  49)		if ((this->_bg->alpha == (int)0)) {
HXLINE(  50)			this->close();
            		}
HXLINE(  51)		this->super::update(elapsed);
            	}


void Pause_obj::fadeThings(){
            	HX_STACKFRAME(&_hx_pos_059b4d95500c6d26_55_fadeThings)
HXLINE(  56)		::flixel::tweens::FlxTween_obj::tween(this->_phone, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),::flixel::FlxG_obj::height)),((Float)0.4), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::backIn_dyn())));
HXLINE(  57)		::flixel::tweens::FlxTween_obj::tween(this->_bg, ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),(int)0)),((Float)0.6), ::Dynamic(hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Pause_obj,fadeThings,(void))

void Pause_obj::closeIT(){
            	HX_STACKFRAME(&_hx_pos_059b4d95500c6d26_62_closeIT)
HXLINE(  62)		this->close();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Pause_obj,closeIT,(void))


hx::ObjectPtr< Pause_obj > Pause_obj::__new( ::Dynamic BGColor) {
	hx::ObjectPtr< Pause_obj > __this = new Pause_obj();
	__this->__construct(BGColor);
	return __this;
}

hx::ObjectPtr< Pause_obj > Pause_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic BGColor) {
	Pause_obj *__this = (Pause_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Pause_obj), true, "Pause"));
	*(void **)__this = Pause_obj::_hx_vtable;
	__this->__construct(BGColor);
	return __this;
}

Pause_obj::Pause_obj()
{
}

void Pause_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pause);
	HX_MARK_MEMBER_NAME(_bg,"_bg");
	HX_MARK_MEMBER_NAME(_phone,"_phone");
	HX_MARK_MEMBER_NAME(_timeStuff,"_timeStuff");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Pause_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_bg,"_bg");
	HX_VISIT_MEMBER_NAME(_phone,"_phone");
	HX_VISIT_MEMBER_NAME(_timeStuff,"_timeStuff");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Pause_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_bg") ) { return hx::Val( _bg); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_phone") ) { return hx::Val( _phone); }
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn()); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"closeIT") ) { return hx::Val( closeIT_dyn()); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_timeStuff") ) { return hx::Val( _timeStuff); }
		if (HX_FIELD_EQ(inName,"fadeThings") ) { return hx::Val( fadeThings_dyn()); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Pause_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"_bg") ) { _bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"_phone") ) { _phone=inValue.Cast<  ::Phone >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_timeStuff") ) { _timeStuff=inValue.Cast<  ::Time >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pause_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_bg","\xe4","\x6b","\x48","\x00"));
	outFields->push(HX_HCSTRING("_phone","\xaf","\x0a","\xdb","\xbd"));
	outFields->push(HX_HCSTRING("_timeStuff","\x68","\xe7","\xad","\x94"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Pause_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Pause_obj,_bg),HX_HCSTRING("_bg","\xe4","\x6b","\x48","\x00")},
	{hx::fsObject /*::Phone*/ ,(int)offsetof(Pause_obj,_phone),HX_HCSTRING("_phone","\xaf","\x0a","\xdb","\xbd")},
	{hx::fsObject /*::Time*/ ,(int)offsetof(Pause_obj,_timeStuff),HX_HCSTRING("_timeStuff","\x68","\xe7","\xad","\x94")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Pause_obj_sStaticStorageInfo = 0;
#endif

static ::String Pause_obj_sMemberFields[] = {
	HX_HCSTRING("_bg","\xe4","\x6b","\x48","\x00"),
	HX_HCSTRING("_phone","\xaf","\x0a","\xdb","\xbd"),
	HX_HCSTRING("_timeStuff","\x68","\xe7","\xad","\x94"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	HX_HCSTRING("fadeThings","\x61","\xd7","\x32","\x08"),
	HX_HCSTRING("closeIT","\xa3","\xb5","\x22","\x79"),
	::String(null()) };

static void Pause_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Pause_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Pause_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Pause_obj::__mClass,"__mClass");
};

#endif

hx::Class Pause_obj::__mClass;

void Pause_obj::__register()
{
	hx::Object *dummy = new Pause_obj;
	Pause_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Pause","\xd6","\x46","\x85","\x50");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Pause_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Pause_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Pause_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Pause_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pause_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pause_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

