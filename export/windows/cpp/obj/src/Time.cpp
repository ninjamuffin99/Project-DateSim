// Generated by Haxe 3.4.0
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Time
#include <Time.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_260a003e93afe41c_46_new,"Time","new",0xadf5b39f,"Time.new","Time.hx",46,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_78_createText,"Time","createText",0xe6a2206a,"Time.createText","Time.hx",78,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_118_updateTime,"Time","updateTime",0x8ccc4957,"Time.updateTime","Time.hx",118,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_174_update,"Time","update",0x8917f42a,"Time.update","Time.hx",174,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_16_boot,"Time","boot",0x81207813,"Time.boot","Time.hx",16,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_17_boot,"Time","boot",0x81207813,"Time.boot","Time.hx",17,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_18_boot,"Time","boot",0x81207813,"Time.boot","Time.hx",18,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_20_boot,"Time","boot",0x81207813,"Time.boot","Time.hx",20,0xa616e4b1)
HX_LOCAL_STACK_FRAME(_hx_pos_260a003e93afe41c_21_boot,"Time","boot",0x81207813,"Time.boot","Time.hx",21,0xa616e4b1)

void Time_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_260a003e93afe41c_46_new)
HXLINE(  47)		super::__construct(null());
HXLINE(  49)		this->textColor = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE(  50)		{
HXLINE(  50)			int Alpha = (int)255;
HXDLIN(  50)			{
HXLINE(  50)				 ::Time _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp->textColor = ((int)_hx_tmp->textColor & (int)(int)-16711681);
HXDLIN(  50)				 ::Time _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp1->textColor = ((int)_hx_tmp1->textColor | (int)(int)15400960);
            			}
HXDLIN(  50)			{
HXLINE(  50)				 ::Time _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp2->textColor = ((int)_hx_tmp2->textColor & (int)(int)-65281);
HXDLIN(  50)				 ::Time _hx_tmp3 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp3->textColor = ((int)_hx_tmp3->textColor | (int)(int)29952);
            			}
HXDLIN(  50)			{
HXLINE(  50)				 ::Time _hx_tmp4 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp4->textColor = ((int)_hx_tmp4->textColor & (int)(int)-256);
HXDLIN(  50)				 ::Time _hx_tmp5 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp5->textColor = ((int)_hx_tmp5->textColor | (int)(int)34);
            			}
HXDLIN(  50)			{
HXLINE(  50)				 ::Time _hx_tmp6 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				_hx_tmp6->textColor = ((int)_hx_tmp6->textColor & (int)(int)16777215);
HXDLIN(  50)				 ::Time _hx_tmp7 = hx::ObjectPtr<OBJ_>(this);
HXDLIN(  50)				int _hx_tmp8;
HXDLIN(  50)				if ((Alpha > (int)255)) {
HXLINE(  50)					_hx_tmp8 = (int)255;
            				}
            				else {
HXLINE(  50)					if ((Alpha < (int)0)) {
HXLINE(  50)						_hx_tmp8 = (int)0;
            					}
            					else {
HXLINE(  50)						_hx_tmp8 = Alpha;
            					}
            				}
HXDLIN(  50)				_hx_tmp7->textColor = ((int)_hx_tmp7->textColor | (int)((int)_hx_tmp8 << (int)(int)24));
            			}
            		}
HXLINE(  52)		int barcolor = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXLINE(  56)		{
HXLINE(  56)			int Alpha1 = (int)255;
HXDLIN(  56)			{
HXLINE(  56)				barcolor = ((int)barcolor & (int)(int)-16711681);
HXDLIN(  56)				barcolor = ((int)barcolor | (int)(int)1638400);
            			}
HXDLIN(  56)			{
HXLINE(  56)				barcolor = ((int)barcolor & (int)(int)-65281);
HXDLIN(  56)				barcolor = ((int)barcolor | (int)(int)5376);
            			}
HXDLIN(  56)			{
HXLINE(  56)				barcolor = ((int)barcolor & (int)(int)-256);
HXDLIN(  56)				barcolor = ((int)barcolor | (int)(int)21);
            			}
HXDLIN(  56)			{
HXLINE(  56)				barcolor = ((int)barcolor & (int)(int)16777215);
HXDLIN(  56)				int barcolor1;
HXDLIN(  56)				if ((Alpha1 > (int)255)) {
HXLINE(  56)					barcolor1 = (int)255;
            				}
            				else {
HXLINE(  56)					if ((Alpha1 < (int)0)) {
HXLINE(  56)						barcolor1 = (int)0;
            					}
            					else {
HXLINE(  56)						barcolor1 = Alpha1;
            					}
            				}
HXDLIN(  56)				barcolor = ((int)barcolor | (int)((int)barcolor1 << (int)(int)24));
            			}
            		}
HXLINE(  58)		 ::flixel::FlxSprite _orangebar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  60)		_orangebar->makeGraphic(::flixel::FlxG_obj::width,(int)24,barcolor,null(),null());
HXLINE(  61)		this->add(_orangebar);
HXLINE(  69)		 ::flixel::FlxSprite _whiteLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(int)0,(int)24,null());
HXLINE(  71)		_whiteLine->makeGraphic(::flixel::FlxG_obj::width,(int)2,(int)-23296,null(),null());
HXLINE(  72)		this->add(_whiteLine);
HXLINE(  74)		this->createText();
            	}

Dynamic Time_obj::__CreateEmpty() { return new Time_obj; }

void *Time_obj::_hx_vtable = 0;

Dynamic Time_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Time_obj > _hx_result = new Time_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Time_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3634c52c) {
		if (inClassId<=(int)0x25a685e0) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x25a685e0;
		} else {
			return inClassId==(int)0x3634c52c;
		}
	} else {
		return inClassId==(int)0x37d5f82d;
	}
}

void Time_obj::createText(){
            	HX_GC_STACKFRAME(&_hx_pos_260a003e93afe41c_78_createText)
HXLINE(  79)		::String textFont = HX_("assets/data/typo_round/Typo_Round_Bold_Demo.otf",07,79,b7,cc);
HXLINE(  81)		this->_sprTime =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)0,(int)0,(int)0,::Std_obj::string(::Time_obj::h),(int)19,null());
HXLINE(  82)		this->_sprTime->set_font(textFont);
HXLINE(  83)		this->add(this->_sprTime);
HXLINE(  85)		this->_textDay =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)40,(int)0,(int)0,(::Time_obj::dd + HX_("/",2f,00,00,00)),(int)19,null());
HXLINE(  86)		this->_textDay->set_font(textFont);
HXLINE(  87)		this->add(this->_textDay);
HXLINE(  89)		this->_textMonth =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)65,(int)0,(int)0,(::Time_obj::mm + HX_("/",2f,00,00,00)),(int)19,null());
HXLINE(  90)		this->_textMonth->set_font(textFont);
HXLINE(  91)		this->add(this->_textMonth);
HXLINE(  93)		this->_textAMPM =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(int)15,(int)0,(int)0,::Time_obj::AMPM,(int)19,null());
HXLINE(  94)		this->_textAMPM->set_font(textFont);
HXLINE(  95)		this->add(this->_textAMPM);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Time_obj,createText,(void))

void Time_obj::updateTime(){
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_118_updateTime)
HXLINE( 119)		this->displayH = ::Time_obj::h;
HXLINE( 121)		if ((::Time_obj::h >= (int)12)) {
HXLINE( 123)			::Time_obj::AMPM = HX_("PM",fd,45,00,00);
HXLINE( 124)			::Time_obj::PM = true;
HXLINE( 125)			if ((::Time_obj::h > (int)12)) {
HXLINE( 126)				this->displayH = ::Time_obj::h;
            			}
HXLINE( 127)			 ::Time _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 127)			_hx_tmp->displayH = (_hx_tmp->displayH - (int)12);
            		}
HXLINE( 130)		if ((::Time_obj::h > (int)23)) {
HXLINE( 132)			::Time_obj::AMPM = HX_("AM",ec,38,00,00);
HXLINE( 133)			 ::Dynamic _hx_tmp1 = hx::ClassOf< ::Time >();
HXDLIN( 133)			::Time_obj::dd = (::Time_obj::dd + (int)1);
HXLINE( 134)			::Time_obj::PM = false;
HXLINE( 138)			 ::Dynamic _hx_tmp2 = hx::ClassOf< ::Time >();
HXDLIN( 138)			::Time_obj::h = (::Time_obj::h - (int)24);
            		}
HXLINE( 141)		if ((::Time_obj::dd >= (int)29)) {
HXLINE( 143)			::Time_obj::dd = (int)1;
HXLINE( 144)			 ::Dynamic _hx_tmp3 = hx::ClassOf< ::Time >();
HXDLIN( 144)			::Time_obj::mm = (::Time_obj::mm + (int)1);
            		}
HXLINE( 148)		if ((::Time_obj::mm >= (int)13)) {
HXLINE( 150)			 ::Dynamic _hx_tmp4 = hx::ClassOf< ::Time >();
HXDLIN( 150)			::Time_obj::yyyy = (::Time_obj::yyyy + (int)1);
HXLINE( 151)			::Time_obj::mm = (int)1;
            		}
HXLINE( 154)		if ((this->displayH == (int)0)) {
HXLINE( 156)			this->displayH = (int)12;
            		}
HXLINE( 160)		 ::flixel::text::FlxText _hx_tmp5 = this->_sprTime;
HXDLIN( 160)		_hx_tmp5->set_text(::Std_obj::string(this->displayH));
HXLINE( 161)		this->_textAMPM->set_text(::Time_obj::AMPM);
HXLINE( 162)		 ::flixel::text::FlxText _hx_tmp6 = this->_textDay;
HXDLIN( 162)		_hx_tmp6->set_text((::Time_obj::dd + HX_(" /",0f,1c,00,00)));
HXLINE( 163)		 ::flixel::text::FlxText _hx_tmp7 = this->_textMonth;
HXDLIN( 163)		_hx_tmp7->set_text((::Time_obj::mm + HX_(" /",0f,1c,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Time_obj,updateTime,(void))

void Time_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_174_update)
HXLINE( 176)		this->updateTime();
HXLINE( 178)		this->super::update(elapsed);
            	}


int Time_obj::yyyy;

int Time_obj::mm;

int Time_obj::dd;

bool Time_obj::PM;

::String Time_obj::AMPM;

int Time_obj::h;

int Time_obj::m;


hx::ObjectPtr< Time_obj > Time_obj::__new() {
	hx::ObjectPtr< Time_obj > __this = new Time_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Time_obj > Time_obj::__alloc(hx::Ctx *_hx_ctx) {
	Time_obj *__this = (Time_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Time_obj), true, "Time"));
	*(void **)__this = Time_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Time_obj::Time_obj()
{
}

void Time_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Time);
	HX_MARK_MEMBER_NAME(_sprTime,"_sprTime");
	HX_MARK_MEMBER_NAME(_textAMPM,"_textAMPM");
	HX_MARK_MEMBER_NAME(_usernameText,"_usernameText");
	HX_MARK_MEMBER_NAME(_cashText,"_cashText");
	HX_MARK_MEMBER_NAME(displayH,"displayH");
	HX_MARK_MEMBER_NAME(_textDay,"_textDay");
	HX_MARK_MEMBER_NAME(_textMonth,"_textMonth");
	HX_MARK_MEMBER_NAME(_healthBar,"_healthBar");
	HX_MARK_MEMBER_NAME(textColor,"textColor");
	HX_MARK_MEMBER_NAME(dim,"dim");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(_txtSound,"_txtSound");
	HX_MARK_MEMBER_NAME(_btnCred,"_btnCred");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Time_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_sprTime,"_sprTime");
	HX_VISIT_MEMBER_NAME(_textAMPM,"_textAMPM");
	HX_VISIT_MEMBER_NAME(_usernameText,"_usernameText");
	HX_VISIT_MEMBER_NAME(_cashText,"_cashText");
	HX_VISIT_MEMBER_NAME(displayH,"displayH");
	HX_VISIT_MEMBER_NAME(_textDay,"_textDay");
	HX_VISIT_MEMBER_NAME(_textMonth,"_textMonth");
	HX_VISIT_MEMBER_NAME(_healthBar,"_healthBar");
	HX_VISIT_MEMBER_NAME(textColor,"textColor");
	HX_VISIT_MEMBER_NAME(dim,"dim");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(_txtSound,"_txtSound");
	HX_VISIT_MEMBER_NAME(_btnCred,"_btnCred");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Time_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return hx::Val( bg); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { return hx::Val( dim); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn()); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprTime") ) { return hx::Val( _sprTime); }
		if (HX_FIELD_EQ(inName,"displayH") ) { return hx::Val( displayH); }
		if (HX_FIELD_EQ(inName,"_textDay") ) { return hx::Val( _textDay); }
		if (HX_FIELD_EQ(inName,"_btnCred") ) { return hx::Val( _btnCred); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_textAMPM") ) { return hx::Val( _textAMPM); }
		if (HX_FIELD_EQ(inName,"_cashText") ) { return hx::Val( _cashText); }
		if (HX_FIELD_EQ(inName,"textColor") ) { return hx::Val( textColor); }
		if (HX_FIELD_EQ(inName,"_txtSound") ) { return hx::Val( _txtSound); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textMonth") ) { return hx::Val( _textMonth); }
		if (HX_FIELD_EQ(inName,"_healthBar") ) { return hx::Val( _healthBar); }
		if (HX_FIELD_EQ(inName,"createText") ) { return hx::Val( createText_dyn()); }
		if (HX_FIELD_EQ(inName,"updateTime") ) { return hx::Val( updateTime_dyn()); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_usernameText") ) { return hx::Val( _usernameText); }
	}
	return super::__Field(inName,inCallProp);
}

bool Time_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { outValue = h; return true; }
		if (HX_FIELD_EQ(inName,"m") ) { outValue = m; return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mm") ) { outValue = mm; return true; }
		if (HX_FIELD_EQ(inName,"dd") ) { outValue = dd; return true; }
		if (HX_FIELD_EQ(inName,"PM") ) { outValue = PM; return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"yyyy") ) { outValue = yyyy; return true; }
		if (HX_FIELD_EQ(inName,"AMPM") ) { outValue = AMPM; return true; }
	}
	return false;
}

hx::Val Time_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"dim") ) { dim=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_sprTime") ) { _sprTime=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"displayH") ) { displayH=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_textDay") ) { _textDay=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_btnCred") ) { _btnCred=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_textAMPM") ) { _textAMPM=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_cashText") ) { _cashText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textColor") ) { textColor=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_txtSound") ) { _txtSound=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_textMonth") ) { _textMonth=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_healthBar") ) { _healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"_usernameText") ) { _usernameText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Time_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"h") ) { h=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"m") ) { m=ioValue.Cast< int >(); return true; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"mm") ) { mm=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"dd") ) { dd=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"PM") ) { PM=ioValue.Cast< bool >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"yyyy") ) { yyyy=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"AMPM") ) { AMPM=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void Time_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("_sprTime","\x63","\x35","\x59","\x8b"));
	outFields->push(HX_HCSTRING("_textAMPM","\x75","\xb0","\xe9","\x8a"));
	outFields->push(HX_HCSTRING("_usernameText","\xc2","\xd4","\x38","\xe9"));
	outFields->push(HX_HCSTRING("_cashText","\x5f","\xe4","\x43","\x3c"));
	outFields->push(HX_HCSTRING("displayH","\xc6","\xcf","\x9a","\x25"));
	outFields->push(HX_HCSTRING("_textDay","\x30","\xe5","\x73","\xd8"));
	outFields->push(HX_HCSTRING("_textMonth","\x14","\xd3","\xef","\x00"));
	outFields->push(HX_HCSTRING("_healthBar","\x58","\x06","\x35","\x9e"));
	outFields->push(HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"));
	outFields->push(HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"));
	outFields->push(HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"));
	outFields->push(HX_HCSTRING("_txtSound","\x9e","\x2f","\xe1","\x25"));
	outFields->push(HX_HCSTRING("_btnCred","\xcb","\x9e","\x09","\x09"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Time_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_sprTime),HX_HCSTRING("_sprTime","\x63","\x35","\x59","\x8b")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_textAMPM),HX_HCSTRING("_textAMPM","\x75","\xb0","\xe9","\x8a")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_usernameText),HX_HCSTRING("_usernameText","\xc2","\xd4","\x38","\xe9")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_cashText),HX_HCSTRING("_cashText","\x5f","\xe4","\x43","\x3c")},
	{hx::fsInt,(int)offsetof(Time_obj,displayH),HX_HCSTRING("displayH","\xc6","\xcf","\x9a","\x25")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_textDay),HX_HCSTRING("_textDay","\x30","\xe5","\x73","\xd8")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_textMonth),HX_HCSTRING("_textMonth","\x14","\xd3","\xef","\x00")},
	{hx::fsObject /*::flixel::ui::FlxBar*/ ,(int)offsetof(Time_obj,_healthBar),HX_HCSTRING("_healthBar","\x58","\x06","\x35","\x9e")},
	{hx::fsInt,(int)offsetof(Time_obj,textColor),HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Time_obj,dim),HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00")},
	{hx::fsObject /*::flixel::FlxSprite*/ ,(int)offsetof(Time_obj,bg),HX_HCSTRING("bg","\xc5","\x55","\x00","\x00")},
	{hx::fsObject /*::flixel::text::FlxText*/ ,(int)offsetof(Time_obj,_txtSound),HX_HCSTRING("_txtSound","\x9e","\x2f","\xe1","\x25")},
	{hx::fsObject /*::flixel::ui::FlxButton*/ ,(int)offsetof(Time_obj,_btnCred),HX_HCSTRING("_btnCred","\xcb","\x9e","\x09","\x09")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Time_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Time_obj::yyyy,HX_HCSTRING("yyyy","\xc0","\x0b","\x57","\x50")},
	{hx::fsInt,(void *) &Time_obj::mm,HX_HCSTRING("mm","\x60","\x5f","\x00","\x00")},
	{hx::fsInt,(void *) &Time_obj::dd,HX_HCSTRING("dd","\x80","\x57","\x00","\x00")},
	{hx::fsBool,(void *) &Time_obj::PM,HX_HCSTRING("PM","\xfd","\x45","\x00","\x00")},
	{hx::fsString,(void *) &Time_obj::AMPM,HX_HCSTRING("AMPM","\xe9","\x91","\x31","\x2b")},
	{hx::fsInt,(void *) &Time_obj::h,HX_HCSTRING("h","\x68","\x00","\x00","\x00")},
	{hx::fsInt,(void *) &Time_obj::m,HX_HCSTRING("m","\x6d","\x00","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Time_obj_sMemberFields[] = {
	HX_HCSTRING("_sprTime","\x63","\x35","\x59","\x8b"),
	HX_HCSTRING("_textAMPM","\x75","\xb0","\xe9","\x8a"),
	HX_HCSTRING("_usernameText","\xc2","\xd4","\x38","\xe9"),
	HX_HCSTRING("_cashText","\x5f","\xe4","\x43","\x3c"),
	HX_HCSTRING("displayH","\xc6","\xcf","\x9a","\x25"),
	HX_HCSTRING("_textDay","\x30","\xe5","\x73","\xd8"),
	HX_HCSTRING("_textMonth","\x14","\xd3","\xef","\x00"),
	HX_HCSTRING("_healthBar","\x58","\x06","\x35","\x9e"),
	HX_HCSTRING("textColor","\x76","\x01","\x4a","\xe3"),
	HX_HCSTRING("dim","\x48","\x3d","\x4c","\x00"),
	HX_HCSTRING("bg","\xc5","\x55","\x00","\x00"),
	HX_HCSTRING("_txtSound","\x9e","\x2f","\xe1","\x25"),
	HX_HCSTRING("_btnCred","\xcb","\x9e","\x09","\x09"),
	HX_HCSTRING("createText","\xc9","\x8d","\x87","\x5f"),
	HX_HCSTRING("updateTime","\xb6","\xb6","\xb1","\x05"),
	HX_HCSTRING("update","\x09","\x86","\x05","\x87"),
	::String(null()) };

static void Time_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Time_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Time_obj::yyyy,"yyyy");
	HX_MARK_MEMBER_NAME(Time_obj::mm,"mm");
	HX_MARK_MEMBER_NAME(Time_obj::dd,"dd");
	HX_MARK_MEMBER_NAME(Time_obj::PM,"PM");
	HX_MARK_MEMBER_NAME(Time_obj::AMPM,"AMPM");
	HX_MARK_MEMBER_NAME(Time_obj::h,"h");
	HX_MARK_MEMBER_NAME(Time_obj::m,"m");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Time_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Time_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Time_obj::yyyy,"yyyy");
	HX_VISIT_MEMBER_NAME(Time_obj::mm,"mm");
	HX_VISIT_MEMBER_NAME(Time_obj::dd,"dd");
	HX_VISIT_MEMBER_NAME(Time_obj::PM,"PM");
	HX_VISIT_MEMBER_NAME(Time_obj::AMPM,"AMPM");
	HX_VISIT_MEMBER_NAME(Time_obj::h,"h");
	HX_VISIT_MEMBER_NAME(Time_obj::m,"m");
};

#endif

hx::Class Time_obj::__mClass;

static ::String Time_obj_sStaticFields[] = {
	HX_HCSTRING("yyyy","\xc0","\x0b","\x57","\x50"),
	HX_HCSTRING("mm","\x60","\x5f","\x00","\x00"),
	HX_HCSTRING("dd","\x80","\x57","\x00","\x00"),
	HX_HCSTRING("PM","\xfd","\x45","\x00","\x00"),
	HX_HCSTRING("AMPM","\xe9","\x91","\x31","\x2b"),
	HX_HCSTRING("h","\x68","\x00","\x00","\x00"),
	HX_HCSTRING("m","\x6d","\x00","\x00","\x00"),
	::String(null())
};

void Time_obj::__register()
{
	hx::Object *dummy = new Time_obj;
	Time_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Time","\x2d","\xf8","\xd5","\x37");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Time_obj::__GetStatic;
	__mClass->mSetStaticField = &Time_obj::__SetStatic;
	__mClass->mMarkFunc = Time_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Time_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Time_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Time_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Time_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Time_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Time_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Time_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_16_boot)
HXLINE(  16)		yyyy = (int)2017;
            	}
{
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_17_boot)
HXLINE(  17)		mm = (int)1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_18_boot)
HXLINE(  18)		dd = (int)4;
            	}
{
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_20_boot)
HXLINE(  20)		AMPM = HX_("AM",ec,38,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_260a003e93afe41c_21_boot)
HXLINE(  21)		h = (int)8;
            	}
}

