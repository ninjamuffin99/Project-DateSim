// Generated by Haxe 3.4.0
#ifndef INCLUDED_Dialogue
#define INCLUDED_Dialogue

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS0(Dialogue)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTypeText)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Dialogue_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef Dialogue_obj OBJ_;
		Dialogue_obj();

	public:
		enum { _hx_ClassId = 0x4ddff200 };

		void __construct(hx::Null< int >  __o__numberOfLines,hx::Null< int >  __o__fontSize,::String _font);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Dialogue")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Dialogue"); }
		static hx::ObjectPtr< Dialogue_obj > __new(hx::Null< int >  __o__numberOfLines,hx::Null< int >  __o__fontSize,::String _font);
		static hx::ObjectPtr< Dialogue_obj > __alloc(hx::Ctx *_hx_ctx,hx::Null< int >  __o__numberOfLines,hx::Null< int >  __o__fontSize,::String _font);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Dialogue_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Dialogue","\x38","\xe9","\x45","\x81"); }

		static void __boot();
		static Float PAUSE_NEXT_PAGE;
		static Float PAUSE_EMPTY_LINE;
		static Float PAUSE_W;
		int WIDTH;
		int HEIGHT;
		int CHARACTERS_WIDTH;
		 ::Dynamic onComplete;
		Dynamic onComplete_dyn() { return onComplete;}
		bool flag_autoClose;
		 ::flixel::text::FlxText cursor;
		Float cursor_timer;
		::Array< ::String > cursor_states;
		int cursor_state;
		Float cursor_freq;
		int paddingText;
		::String alignY;
		int numberOfLines;
		::Array< ::Dynamic> lines;
		::Array< ::String > queue;
		int lineToFeed;
		bool isPaused;
		bool isAnimating;
		bool isOpen;
		 ::flixel::util::FlxTimer pauseTimer;
		void destroy();

		void setDialog(::Array< ::String > dialogArray,hx::Null< bool >  autoStart);
		::Dynamic setDialog_dyn();

		void clearLines();
		::Dynamic clearLines_dyn();

		void feedNext();
		::Dynamic feedNext_dyn();

		void onLineComplete();
		::Dynamic onLineComplete_dyn();

		void feedWait();
		::Dynamic feedWait_dyn();

		void feedResume();
		::Dynamic feedResume_dyn();

		void update(Float elapsed);

		void updateCursor();
		::Dynamic updateCursor_dyn();

};


#endif /* INCLUDED_Dialogue */ 
