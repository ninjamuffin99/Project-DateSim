// Generated by Haxe 3.4.0
#ifndef INCLUDED_Choices
#define INCLUDED_Choices

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
HX_DECLARE_CLASS0(Choices)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Choices_obj : public  ::flixel::group::FlxTypedSpriteGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedSpriteGroup_obj super;
		typedef Choices_obj OBJ_;
		Choices_obj();

	public:
		enum { _hx_ClassId = 0x55d2060a };

		void __construct( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Choices")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Choices"); }
		static hx::ObjectPtr< Choices_obj > __new( ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		static hx::ObjectPtr< Choices_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic X, ::Dynamic Y, ::Dynamic MaxSize);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Choices_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Choices","\xd2","\xdd","\x68","\xa6"); }

		::Array< ::Dynamic> choiceNum;
		int choicePicked;
		bool _btnPressed;
		void _newChoices(::Array< ::String > wordsChoices);
		::Dynamic _newChoices_dyn();

		void update(Float elapsed);

		int _getChoices();
		::Dynamic _getChoices_dyn();

		void deadzo();
		::Dynamic deadzo_dyn();

};


#endif /* INCLUDED_Choices */ 
