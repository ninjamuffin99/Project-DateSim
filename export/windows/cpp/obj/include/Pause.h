// Generated by Haxe 3.4.0
#ifndef INCLUDED_Pause
#define INCLUDED_Pause

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
HX_DECLARE_CLASS0(Pause)
HX_DECLARE_CLASS0(Phone)
HX_DECLARE_CLASS0(Time)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS1(flixel,FlxSubState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Pause_obj : public  ::flixel::FlxSubState_obj
{
	public:
		typedef  ::flixel::FlxSubState_obj super;
		typedef Pause_obj OBJ_;
		Pause_obj();

	public:
		enum { _hx_ClassId = 0x508546d6 };

		void __construct( ::Dynamic BGColor);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Pause")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Pause"); }
		static hx::ObjectPtr< Pause_obj > __new( ::Dynamic BGColor);
		static hx::ObjectPtr< Pause_obj > __alloc(hx::Ctx *_hx_ctx, ::Dynamic BGColor);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Pause_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Pause","\xd6","\x46","\x85","\x50"); }

		 ::flixel::FlxSprite _bg;
		 ::Phone _phone;
		 ::Time _timeStuff;
		void create();

		void update(Float elapsed);

		void fadeThings();
		::Dynamic fadeThings_dyn();

		void closeIT();
		::Dynamic closeIT_dyn();

};


#endif /* INCLUDED_Pause */ 
