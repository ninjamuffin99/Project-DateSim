// Generated by Haxe 3.4.0
#ifndef INCLUDED_Time
#define INCLUDED_Time

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Time)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,input,IFlxInput)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,ui,FlxBar)
HX_DECLARE_CLASS2(flixel,ui,FlxButton)
HX_DECLARE_CLASS2(flixel,ui,FlxTypedButton_flixel_text_FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Time_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Time_obj OBJ_;
		Time_obj();

	public:
		enum { _hx_ClassId = 0x37d5f82d };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Time")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"Time"); }
		static hx::ObjectPtr< Time_obj > __new();
		static hx::ObjectPtr< Time_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Time_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Time","\x2d","\xf8","\xd5","\x37"); }

		static void __boot();
		static int yyyy;
		static int mm;
		static int dd;
		static bool PM;
		static ::String AMPM;
		static int h;
		static int m;
		 ::flixel::text::FlxText _sprTime;
		 ::flixel::text::FlxText _textAMPM;
		 ::flixel::text::FlxText _usernameText;
		 ::flixel::text::FlxText _cashText;
		int displayH;
		 ::flixel::text::FlxText _textDay;
		 ::flixel::text::FlxText _textMonth;
		 ::flixel::ui::FlxBar _healthBar;
		int textColor;
		 ::flixel::FlxSprite dim;
		 ::flixel::FlxSprite bg;
		 ::flixel::text::FlxText _txtSound;
		 ::flixel::ui::FlxButton _btnCred;
		void createText();
		::Dynamic createText_dyn();

		void updateTime();
		::Dynamic updateTime_dyn();

		void update(Float elapsed);

};


#endif /* INCLUDED_Time */ 
